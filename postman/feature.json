{
	"info": {
		"_postman_id": "a4f13eef-91fe-4204-9a85-cf1207ea18b1",
		"name": "Test Explore With Me - Feature subscriptions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "Проверка  ошибки для дублирования подписки",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//создаем тестовые данные для добавления подписки",
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"",
									"    try {",
									"        const user_subs = await api.addUser(rnd.getUser()); //добавили user-subscriber",
									"        pm.collectionVariables.set(\"user_subs_id\", user_subs.id) //сохранили его id",
									"        const user = await api.addUser(rnd.getUser()); //добавили user-subscription",
									"        pm.collectionVariables.set(\"user_id\", user.id) //сохранили его id, добавим на него событие",
									"        pm.collectionVariables.set(\"user_name\", user.name) //сохранили его name, чтобы подписаться",
									"        pm.collectionVariables.set(\"user\", user)",
									"        // const category = await api.addCategory(rnd.getCategory());",
									"        // let event = await api.addEvent(user.id, rnd.getEvent(category.id)); //добавили событие",
									"        // event = await api.publishEvent(event.id); //опубликовали собылие",
									"        //добавляем подписку на пользователя с открытым профилем",
									"        var body_subscription1 = {userSubscription: pm.collectionVariables.get(\"user_name\")};",
									"        let subscription1 = await api.addSubscription(user_subs.id,body_subscription1);",
									"",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"        var subscription = {",
									"userSubscription: pm.collectionVariables.get(\"user_name\")",
									"};",
									"",
									"pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(subscription),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"",
									"    };",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
									"    pm.response.to.have.status(409);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/subscriptions/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscriptions",
								":userId"
							],
							"query": [
								{
									"key": "userId",
									"value": "13",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{user_subs_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка  ошибки в случае подписки на самого себя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//создаем тестовые данные для добавления подписки",
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"",
									"    try {",
									"        const user_subs = await api.addUser(rnd.getUser()); //добавили user-subscriber",
									"        pm.collectionVariables.set(\"user_subs_id\", user_subs.id) //сохранили его id",
									"        const user = await api.addUser(rnd.getUser()); //добавили user-subscription",
									"        pm.collectionVariables.set(\"user_id\", user.id) //сохранили его id, добавим на него событие",
									"        pm.collectionVariables.set(\"user_name\", user.name) //сохранили его name, чтобы подписаться",
									"        pm.collectionVariables.set(\"user\", user)",
									"        // const category = await api.addCategory(rnd.getCategory());",
									"        // let event = await api.addEvent(user.id, rnd.getEvent(category.id)); //добавили событие",
									"        // event = await api.publishEvent(event.id); //опубликовали собылие",
									"    ",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"        var subscription = {",
									"userSubscription: pm.collectionVariables.get(\"user_name\")",
									"};",
									"",
									"pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(subscription),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"",
									"    };",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
									"    pm.response.to.have.status(409);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/subscriptions/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscriptions",
								":userId"
							],
							"query": [
								{
									"key": "userId",
									"value": "13",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscriptions",
			"item": [
				{
					"name": "Добавление подписки пользователю с открытым профилем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//создаем тестовые данные для добавления подписки",
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"",
									"    try {",
									"        const user_subs = await api.addUser(rnd.getUser()); //добавили user-subscriber",
									"        pm.collectionVariables.set(\"user_subs_id\", user_subs.id) //сохранили его id",
									"        const user = await api.addUser(rnd.getUser()); //добавили user-subscription",
									"        pm.collectionVariables.set(\"user_id\", user.id) //сохранили его id, добавим на него событие",
									"        pm.collectionVariables.set(\"user_name\", user.name) //сохранили его name, чтобы подписаться",
									"        pm.collectionVariables.set(\"user\", user)",
									"        // const category = await api.addCategory(rnd.getCategory());",
									"        // let event = await api.addEvent(user.id, rnd.getEvent(category.id)); //добавили событие",
									"        // event = await api.publishEvent(event.id); //опубликовали собылие",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"        var subscription = {",
									"userSubscription: pm.collectionVariables.get(\"user_name\")",
									"};",
									"",
									"pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(subscription),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"",
									"    };",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Проверка id подписки\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"});",
									"pm.test(\"Проверка id пользователя, на которого подписались\", function () {",
									"    pm.expect(target.userSubscription.id).equal(pm.collectionVariables.get(\"user\").id, 'id должен равняться id того пользователя, на которого подписались');",
									"});",
									"pm.test(\"Проверка статуса подписки\", function () {",
									"    pm.expect(target.subscriptionState).equal('ACTIVE', 'Статус подписки должен равняться ACTIVE')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/subscriptions/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscriptions",
								":userId"
							],
							"query": [
								{
									"key": "userId",
									"value": "13",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{user_subs_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Закрытие профиля пользователю",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//создаем тестовые данные для добавления подписки\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user_closed = await api.addUser(rnd.getUser()); //добавили user-subscription\r",
									"        pm.collectionVariables.set(\"user_closed_id\", user_closed.id) //сохранили его id, добавим на него событие\r",
									"        pm.collectionVariables.set(\"user_closed_name\", user_closed.name) //сохранили его name\r",
									"        pm.collectionVariables.set(\"user_closed\", user_closed)\r",
									"        pm.request.addQueryParams([`isPublicProfile=false`]);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/users/:userId?isPublicProfile=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "isPublicProfile",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{user_closed_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление подписки пользователю с закрытым профилем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//создаем тестовые данные для добавления подписки",
									"const main = async () => {",
									"//     const api = new API(pm);",
									"//     const rnd = new RandomUtils();",
									"",
									"",
									"//     try {",
									"//         const userId_subs = await api.addUser(rnd.getUser()); //добавили user-subscriber",
									"//         pm.collectionVariables.set(\"userId_subs\", userId_subs.id) //сохранили его id",
									"//     } catch(err) {",
									"//         console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"//     }",
									"",
									"        var subscription = {",
									"userSubscription: pm.collectionVariables.get(\"user_closed_name\")",
									"};",
									"",
									"pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(subscription),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"",
									"    };",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);  ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Проверка статуса подписки\", function () {",
									"    pm.expect(target.status).equal('ACCEPTED')",
									"});",
									"pm.test(\"Проверка исключения при добавлении подписки на пользователя с закрытым профилем\", function () {",
									"    var name = pm.collectionVariables.get(\"user_closed_name\");",
									"    pm.expect(target.message).equal('У пользователя ' + name + ' закрытый профиль, подписка автоматически активируется, когда пользователь ее одобрит');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/subscriptions/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscriptions",
								":userId"
							],
							"query": [
								{
									"key": "userId",
									"value": "13",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{user_subs_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение событий только тех пользователей, на которых подписаны",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//создаем тестовые данные для добавления подписки\r",
									" const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"     try {\r",
									"         const category = await api.addCategory(rnd.getCategory());\r",
									"         let event = await api.addEvent(pm.collectionVariables.get(\"user_id\"), rnd.getEvent(category.id)); //добавили событие\r",
									"         event = await api.publishEvent(event.id); //опубликовали собылие\r",
									"//         const user1 = await api.addUser(rnd.getUser()); //первый user\r",
									"//         pm.collectionVariables.set(\"user1\", user1) //сохранили его\r",
									"//         pm.collectionVariables.set(\"user1_id\", user1.id)\r",
									"\r",
									"//         const user2_closed = await api.addUser(rnd.getUser()); //второй user\r",
									"//         pm.collectionVariables.set(\"userName2_closed\", user2_closed.name)\r",
									"//         pm.collectionVariables.set(\"userId2_closed\", user2_closed.id)\r",
									"//         pm.collectionVariables.set(\"user2_closed\", user2_closed); //сохранили его\r",
									"\r",
									"//         const user_subs = await api.addUser(rnd.getUser()); //добавили user-subs\r",
									"//         pm.collectionVariables.set(\"user_subs\", user_subs); //сохранили его \r",
									"//         pm.collectionVariables.set(\"userId_subs\", user_subs.id); //сохранили его id\r",
									"\r",
									"//         const category1 = await api.addCategory(rnd.getCategory());\r",
									"//         let event1 = await api.addEvent(user1.id, rnd.getEvent(category1.id)); //добавили событие\r",
									"//         event1 = await api.publishEvent(event1.id); //опубликовали собылие\r",
									"\r",
									"//         const category2 = await api.addCategory(rnd.getCategory());\r",
									"//         let event2 = await api.addEvent(user2_closed.id, rnd.getEvent(category2.id)); //добавили событие\r",
									"//         event2 = await api.publishEvent(event2.id); //опубликовали собылие\r",
									"\r",
									"//         //добавляем подписку на пользователя с открытым профилем\r",
									"//         var body_subscription1 = {userSubscription: user1.name};\r",
									"//         let subscription1 = await api.addSubscription(user_subs.id,body_subscription1);\r",
									"\r",
									"//         //закрываем профиль user2\r",
									"//         var resp = api.closedUser(user2_closed.id);\r",
									"\r",
									"//         //добавляем подписку на пользователя с закрытым профилем\r",
									"//         var body_subscription2 = {userSubscription: pm.collectionVariables.get(\"userName2_closed\")};\r",
									"//         let subscription2 = await api.addSubscription(user_subs.id, body_subscription2);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Должно быть найдено только одно событие\", function () { //второе событие не отображается, потому что вторая подписка еще одобрена\r",
									"    pm.expect(target.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"id пользователя-инициатора должно совпадать с id пользователя с публичным профилем\", function () {\r",
									"    pm.expect(target[0].initiator.id).equal(pm.collectionVariables.get(\"user_id\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/subscriptions/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"subscriptions",
								":userId"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10",
									"description": "количество элементов в наборе",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{user_subs_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение подписок пользователем, которые требуют одобрения",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let compilation;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Должен быть найден только один запрос на подписку\", function () {\r",
									"    pm.expect(target.length).to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"id должен равняться id пользователя, запросившего подписку\", function () {\r",
									"    pm.expect(target[0].subscriber.id).equal(pm.collectionVariables.get(\"user_subs_id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/subscriptions/requests/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscriptions",
								"requests",
								":userId"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10",
									"description": "количество элементов в наборе",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{user_closed_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Одобрение подписки пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//создаем тестовые данные для добавления подписки",
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"",
									"    try {",
									"        const subs = await api.getSubscription(pm.collectionVariables.get(\"user_closed_id\"));",
									"        pm.collectionVariables.set(\"subsId\", subs[0].id);",
									"        // const userId_subs = await api.addUser(rnd.getUser()); //добавили user-subscriber",
									"        // pm.collectionVariables.set(\"userId_subs\", userId_subs.id) //сохранили его id",
									"        // const user = await api.addUser(rnd.getUser()); //добавили user-subscription",
									"        // pm.collectionVariables.set(\"uid\", user.id) //сохранили его id, добавим на него событие",
									"        // pm.collectionVariables.set(\"user_name\", user.name) //сохранили его name, чтобы подписаться",
									"        // pm.collectionVariables.set(\"user\", user)",
									"",
									"        //  //добавляем подписку на пользователя с открытым профилем",
									"        // var body_subscription = {userSubscription: user.name};",
									"        // let subscription = await api.addSubscription(userId_subs.id,body_subscription);",
									"        // pm.collectionVariables.set(\"subsId\", subscription.id);",
									"",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscriptions/approved/:subscriptionsId/:userId?isApprovedSubscription=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscriptions",
								"approved",
								":subscriptionsId",
								":userId"
							],
							"query": [
								{
									"key": "isApprovedSubscription",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "subscriptionsId",
									"value": "{{subsId}}"
								},
								{
									"key": "userId",
									"value": "{{user_closed_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение событий только тех пользователей, на кот. подписаны (второй пользователь одобрил подписку)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//создаем тестовые данные для добавления подписки\r",
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"\r",
									"        //создаем событие для пользователя с закрытым профилем\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(pm.collectionVariables.get(\"user_closed_id\"), rnd.getEvent(category.id)); //добавили событие\r",
									"        event = await api.publishEvent(event.id); //опубликовали собылие\r",
									"\r",
									"        // const user1 = await api.addUser(rnd.getUser()); //первый user\r",
									"        // pm.collectionVariables.set(\"user1\", user1) //сохранили его\r",
									"        // pm.collectionVariables.set(\"userId_1\", user1.id)\r",
									"\r",
									"        // const user2_closed = await api.addUser(rnd.getUser()); //второй user\r",
									"        // pm.collectionVariables.set(\"userNameClosed_2\", user2_closed.name)\r",
									"        // pm.collectionVariables.set(\"userId2_closed\", user2_closed.id)\r",
									"        // pm.collectionVariables.set(\"user2_closed\", user2_closed); //сохранили его\r",
									"        //  //закрываем профиль user2\r",
									"        // api.closedUser(pm.collectionVariables.get(\"userId2_closed\"));\r",
									"\r",
									"        // const user_subs = await api.addUser(rnd.getUser()); //добавили user-subs\r",
									"        // pm.collectionVariables.set(\"user_subs\", user_subs); //сохранили его \r",
									"        // pm.collectionVariables.set(\"userId_subs\", user_subs.id); //сохранили его id\r",
									"\r",
									"        // const category1 = await api.addCategory(rnd.getCategory());\r",
									"        // let event1 = await api.addEvent(user1.id, rnd.getEvent(category1.id)); //добавили событие\r",
									"        // event1 = await api.publishEvent(event1.id); //опубликовали собылие\r",
									"\r",
									"        // const category2 = await api.addCategory(rnd.getCategory());\r",
									"        // let event2 = await api.addEvent(user2_closed.id, rnd.getEvent(category2.id)); //добавили событие\r",
									"        // event2 = await api.publishEvent(event2.id); //опубликовали собылие\r",
									"\r",
									"        // //добавляем подписку на пользователя с открытым профилем\r",
									"        // //log(\"добавили подписку на пользователя с открытым профилем\");\r",
									"        // var body_subscription1 = {userSubscription: user1.name};\r",
									"        // var subscription1 = await api.addSubscription(user_subs.id,body_subscription1);\r",
									"\r",
									"        // //добавляем подписку на пользователя с закрытым профилем\r",
									"        // var body_subscription2 = {userSubscription: pm.collectionVariables.get(\"userName2_closed\")};\r",
									"        // var subscription2 = await api.addSubscription(user_subs.id, body_subscription2);\r",
									"        // var str1 = subscription2.reason;\r",
									"        // var index = str1.indexOf(\"=\");\r",
									"        // var res = str1.slice(index+1);\r",
									"        // pm.collectionVariables.set(\"subs2_id\", res);\r",
									"\r",
									"        // //одобряем подписку от user2\r",
									"        // await api.approvedSubscription(pm.collectionVariables.get(\"subs2_id\"), pm.collectionVariables.get(\"userId2_closed\"));\r",
									"\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Должно быть найдено два событий\", function () { //события два, так как второй пользователь одобрил заявку\r",
									"    pm.expect(target.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"id инициатора события должно совпадать с id одного из двух пользователей, на кот. подписались\", function () {\r",
									"    pm.expect(target[0].initiator.id).to.be.oneOf([pm.collectionVariables.get(\"user_id\"), pm.collectionVariables.get(\"user_closed_id\")]);\r",
									"    pm.expect(target[1].initiator.id).to.be.oneOf([pm.collectionVariables.get(\"user_id\"), pm.collectionVariables.get(\"user_closed_id\")]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events/subscriptions/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"subscriptions",
								":userId"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10",
									"description": "количество элементов в наборе",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{user_subs_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех подписок подписчиком",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let compilation;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Должно быть найдено две подписки\", function () {\r",
									"    pm.expect(target.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/subscriptions/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscriptions",
								":userId"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10",
									"description": "количество элементов в наборе",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{user_subs_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление подписки",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/subscriptions/cancelled/:userId?userIdForClosed={{user_closed_id}}&isSubscriber=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscriptions",
								"cancelled",
								":userId"
							],
							"query": [
								{
									"key": "userIdForClosed",
									"value": "{{user_closed_id}}"
								},
								{
									"key": "isSubscriber",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{user_subs_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех подписок подписчиком (после удаления)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let compilation;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Должна быть найдена только одна подписка\", function () {\r",
									"    pm.expect(target.length).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/subscriptions/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"subscriptions",
								":userId"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10",
									"description": "количество элементов в наборе",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{user_subs_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async closedUser(userId, verbose=null) {",
					"        return this.post(\"/admin/users/\" + userId + \"?isPublicProfile=false\", {stateAction: \"SUCCESSFUL\"}, \"Ошибка при закрытии профиля пользователя: \", verbose);",
					"    }",
					"",
					"    async addSubscription(userId, subscription, verbose=null) {",
					"        return this.post(\"/subscriptions/\" + userId, subscription, \"Ошибка при добавлении новой подписки: \", verbose);",
					"    }",
					"",
					"    async getSubscription(userId, verbose=null) {",
					"        return this.get(\"/subscriptions/requests/\" + userId, null, \"Ошибка при получении подписок, которые требуеют одобрения: \", verbose);",
					"    }",
					"",
					"    async approvedSubscription(subsId, userId, verbose=null) {",
					"        return this.post(\"/subscriptions/approved/\" + subsId +\"/\" + userId + \"?isApprovedSubscription=true\", null, \"Ошибка при одобрении новой подписки: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "user_name",
			"value": "",
			"type": "default"
		},
		{
			"key": "user_subs_id",
			"value": ""
		},
		{
			"key": "user",
			"value": ""
		},
		{
			"key": "user_subs",
			"value": ""
		},
		{
			"key": "subsId",
			"value": "",
			"type": "default"
		},
		{
			"key": "user_closed_name",
			"value": "",
			"type": "default"
		},
		{
			"key": "user_closed_id",
			"value": "",
			"type": "default"
		},
		{
			"key": "user_closed",
			"value": ""
		},
		{
			"key": "user_id",
			"value": "",
			"type": "default"
		}
	]
}